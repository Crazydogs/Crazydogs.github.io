---
layout: post
title:  "vim 的使用姿势"
date:   2015-8-16 18:31:00
category: coding
---

Vim 是个博大精深的编辑器，虽然各种编辑器层出不穷（说实话 VS 也挺好用的）但还是改
不了这个习惯。

分享一下 Vim 的使用经验吧，自己也当做收集和整理

## 概览
1. 模式
vim 有三种模式，普通(normal)/输入(insert)/可视(visal)，通过 ESC 键来切换到 normal
状态，i(当然还有 I, a, A, o ...) 和 v(当然还有 V, ctr-v) 分别进入 insert 和 visal
状态。normal 状态用来移动光标，输入指令等，insert 状态用来数据，visal 状态用来选择

2. 动词、名词与量词
我个人习惯用这种划分方式来理解 vim 的各种操作。
    1. 动词，是一个操作，比如 y 就是复制，p 就是粘贴，d 是删除之类的，当然动词的
    数量非常多，基本上能覆盖到你所有文本编辑中会遇到的操作。
    2. 名词，是一个位置，比如 hjkl 在我的理解中，其实是名词，他们代表一个位置，比
    如 j 代表的是当前光标位置下一行的位置，而不是理解为移动光标到下一行这么一个动
    作。因为名词是动词的宾语，比如 y 是复制，拿它须要一个复制的对象，一个名词，那
    你输入 yj，成功复制了当前行和下一行，这里 j 的身份，是一个名词。就像你用 y12G
    就是复制当前行到第 12 行，这个 12G 或者 gg(到文件首行) 或者 G(到文件末尾)，或
    者 $(到行尾)，这些都是一样的性质，表示一个位置。
    按照这种理解，vim 中的名词也非常多，包含了各种各样的粒度，单个字符的(h,l)，一
    个单词(w,b,W,B)，一句话((,))，一段话({,})，一个文件(gg,G)。还有其他的比如 % 
    是匹配的各种括号，nG 是指定行，' 是指定标记位置等等，f 是当前行匹配字符，等等
    等等，只有你想不到，没有做不到。
    另外一种我作为名词看待的，是寄存器，在 normal 模式下输入 :reg 就可以看到自己
    当前的寄存器状况，默认拷贝的时候是会把东西存到寄存器 "" 和 "0 (对，寄存器都是
    双引号标识的)，当然也可以指定，比如 "ay 就会把内容复制到 "a 寄存器里面。当然
    还有很多默认的寄存器 ":, "/, "+(这个在 mac 下面会有点问题) 等等。
    当然寄存器还可以储存操作记录，也就是所谓的宏，不过比较复杂就后面再讲吧
    3. 量词，顾名思义，表示数量，通常跟动词和名词配合，比如想要复制 10 次相同内容
    就是用 10p，向上移动 5 行就用 5k。

3. 命令
命令是在 normal 模式下可以使用的一些指令，用 : 来开始输入指令，输入完成后用回车，
确认执行，比如新手使用 vim 最急需的一个 :q 命令，就是退出命令。当然 vim 的命令也
很多，常用的比如保存 :w(保存)，:vs(垂直分屏), :sp(水平分屏), :s(正则替换) 等。

熟悉了常用的一些动词名词，就可以像使用普通的文本编辑器一样使用 vim 了。但仅仅是
这样，还算不上一个合格的 IDE，最多就是一个不用鼠标的优势而已。

## 环境配置
想要舒服地写码，当然少不了配置一下环境了，调整到一个适合自己的状态，效率才高嘛。
在 vim 里面，环境配置当然可以直接在 normal 模式下使用 :set 指令做到。但每次都要
配置一下也太反人类了，开发者当然没有这么傻。vim 的配置文件是 vimrc，具体的位子和
文件名可能会因为系统有一点点差别，但总的来说可以理解为把平时要写的 vim 配置命令
一行一条的写在一起，然后 vim 在启动的时候会先把这些命令跑一遍，跟 bashrc 之类的
东西差不多一个意思。

个人认为必不可少的一些配置包括编码设置，行号，语法高亮，tab 键设置，自动缩进，高
亮搜索，折叠设置，比如下面这些就是我 vimrc 中的部分基本配置

````
    "设置编码
    set encoding=utf-8
    "显示行号
    set nu
    "语法高亮
    syntax on
    "不做备份
    set nobackup
    "tab长度
    set tabstop=4
    set sw=4
    "space替代tab
    set expandtab
    "自动缩进
    set ai 
    "显示命令
    set showcmd
    "高亮显示搜索
    set hlsearch
    "80列提示
    set cc=80
    "按缩进折叠
    set fdm=indent
````

当然如果用来写码的话，这依然还是不够的。IDE 的重要功能之一就是减少我们的输入量，
也就是传说中的自动补全，联想输入之类的，vim 虽然也有(ctr-n)来自动补全，但是是要求
先输入过一遍，所以就要请出强大的 map 命令了。map 其实就是配置文件中的宏，可以把
特定的输入转为其他的输入。
比如作为一个前端，我的 vimrc 里面有这样的配置

````
    let mapleader = ";"
    inoremap <leader>html <html><CR><head></head><CR><body><body><CR></html><esc>ki
    inoremap <leader>link <link rel="stylesheet" type="text/css" href=""><esc>hi
````

let mapleader 这一句是设定 map 的启动键，当然这并不是必须的，直接

inoremap ;link <link rel="stylesheet" type="text/css" href=""><esc>hi

也是可以的，当然写成变量更好一些啦。
下面一句 map 的意思就是当输入 ;html 的时候，转换成后面的输入，其中 <esc> 还切回
了普通模式，k 移动到 body 标签里面，再用 i 切回 insert 模式。第二句其实也差不多，
是针对 link 标签的一个 map。而 map 命令中还加了两个参数，就是 inoremap 中的 i 和
nore，i 表示这个 map 只在 insert 模式生效（当然可以猜到 v 和 n 代表啥了，其实还
有 c 是命令行模式），nore 表示不进行递归。

递归 map 是什么意思呢，就是说如果我为了输入引号方便，把 " map 到 ""，递归的话，新
输入的两个双引号就又会变成 4 个，4 个变成 8 个，就没完没了了。vim 默认递归 map，
所以如果可能出问题的 map 就不要递归了。

当然 map 的用处远远不止这些，比如说我使用了一个 nerdtree 的 vim 插件打开插件很麻
那可以加一个命令的 map

````
    noremap to :NERDTreeToggle<CR>
````

如果我觉得平时默认复制东西在 "0 寄存器容易被 dd 操作覆盖掉，那我可以加个复制用的
map

````
    vnoremap <leader>y "ay
````

文件类型判断也可以

````
    noremap <F5> <ESC>:set filetype=html<ENTER>
    noremap <F6> <ESC>:set filetype=css<ENTER>
    noremap <F7> <ESC>:set filetype=javascript<ENTER>
````

总之就是写码的时候有任何要手打的不爽的东西就全丢进去就好了。

未完待续，施工中。。。
