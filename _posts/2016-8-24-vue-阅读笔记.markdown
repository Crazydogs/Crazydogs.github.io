---
layout: post
title:  "Vue 阅读笔记"
date:   2016-8-24 16:44:10
category: coding
---

看一下 vue 的源码，顺便做个笔记

- 作为模块加载
{% highlight javascript %}
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
        (global.Vue = factory());
    }(this, function () { 'use strict';
        ...
    }));
{% endhighlight %}

- set 方法
用于为对象添加属性
{% highlight javascript %}
    function set(obj, key, val) {
        // 如已有该属性，覆盖 [hasOwn](#)
        if (hasOwn(obj, key)) {
            obj[key] = val;
            return;
        }
        // 如对象为 vueModel，设置 _data 中的值
        if (obj._isVue) {
            set(obj._data, key, val);
            return;
        }
        var ob = obj.__ob__;
        // 如果不是 vueModel 则简单设置值
        if (!ob) {
            obj[key] = val;
            return;
        }
        // 如果是 vueModel 须要额外处理工作
        // 将属性设置为可响应的 [convert](#)
        ob.convert(key, val);
        // 通知依赖该数据的对象 [notify](#)
        ob.dep.notify();
        // 如果有上级的 vueModel，更新键值和 watcher
        if (ob.vms) {
            var i = ob.vms.length;
            while (i--) {
                var vm = ob.vms[i];
                vm._proxy(key);
                vm._digest();
            }
        }
        return val;
    }
{% endhighlight %}

- del 方法
为对象删除属性，如果有必要，触发 change 事件
{% highlight javascript %}
    function del(obj, key) {
        // 检查是否已有该属性 [hasOwn](#)
        if (!hasOwn(obj, key)) {
            return;
        }
        delete obj[key];
        var ob = obj.__ob__;
        if (!ob) {
            if (obj._isVue) {
                delete obj._data[key];
                // 更新所有 watcher [_digest](#)
                obj._digest();
            }
            return;
        }
        // 通知依赖此属性的对象 [notify](#)
        ob.dep.notify();
        // 如果有上级的 vueModel，更新键值和 watcher
        if (ob.vms) {
            var i = ob.vms.length;
            while (i--) {
                var vm = ob.vms[i];
                vm._unproxy(key);
                vm._digest();
            }
        }
    }
{% endhighlight %}

- 字符串检查
检查一个字符串是否能被转为字面量
{% highlight javascript %}
    // 开头空格+(布尔值|正负数|字符串)结尾空格
    var literalValueRE = /^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/;

    function isLiteral(exp) {
        return literalValueRE.test(exp);
    }
{% endhighlight %}
检查是否为保留字，即是否以 $ 或 _ 开头

- 类型转换
    对特殊情况做了处理
    - _toString 转为字符串，确保空值输出为空字符串
    - toNumber 转为数字，无法转为数字时返回原值
    - toBoolean 转为布尔值，'false' 被认为是假值

- 字符串格式化
    - stripQuotes 去除字符串首尾引号
    - camelize 将用 - 拼接的字符串转为驼峰式字符串
    - hyphenate 将驼峰式的字符串转为用连字符连接
    - classify 将用 - 或 _ 或 / 连接的字符串转为驼峰式的类名

- 辅助函数
    - bind 代替原生的 bind 方法
    - toArray 将类数组对象转为真正的数组
    - extend 类似于 jQuery 的 extend 不过不提供深层递归功能
    - isObject 判断是否为对象（排除 null），主要用于判断是否能被 json 编码
    - isPlainObject 判断是否为简单的对象即 toString 返回 [object Object]
    - def 为对象设置带描述符的属性
    - _debounce 防抖函数，防止函数被过于频繁地触发
    - indexOf 在数组中查询对象的索引值
    - cancellable 将一个函数包装成一个可取消的版本，主要用于回调函数
        {% highlight javascript %}
        function cancellable(fn) {
            var cb = function cb() {
                if (!cb.cancelled) {
                    return fn.apply(this, arguments);
                }
            };
            // 可以通过调用 cancel 方法来静默原函数
            cb.cancel = function () {
                cb.cancelled = true;
            };
            return cb;
        }
        {% endhighlight %}

- 辅助函数
    - looseEqual 检查两个参数是否相等，如果均为对象且 json 编码后相同也视为相等
    - hasProto 检查是否有 __proto__ 属性
    - isBrowser 检查运行环境是否在浏览器中
    - 浏览器检查
        - isIE
        - isIE9
        - isAndroid
        - isIos
        - iosVersion
    - 浏览器兼容
        - hasMutationObserverBug 检查 iOS 版本是否高于 9.3
        - 根据浏览器设置 transition 和 animation 的前缀和事件名

- 辅助函数
    - nextTick 设置一个异步任务，通过 nextTick(callbackfun, context) 使用
    {% highlight javascript %}
    var nextTick = (function () {
        var callbacks = [];
        var pending = false;
        var timerFunc;
        function nextTickHandler() {
            pending = false;
            var copies = callbacks.slice(0);
            callbacks = [];
            for (var i = 0; i < copies.length; i++) {
                copies[i]();
            }
        }

        /* istanbul ignore if */
        if (typeof MutationObserver !== 'undefined' && !hasMutationObserverBug) {
            // 如果可以使用 MutationObserver 的话使用一个不断改变内容的文字节点来触发异步事件
            var counter = 1;
            var observer = new MutationObserver(nextTickHandler);
            var textNode = document.createTextNode(counter);
            observer.observe(textNode, {
                characterData: true
            });
            timerFunc = function () {
                counter = (counter + 1) % 2;
                textNode.data = counter;
            };
        } else {
            // webpack attempts to inject a shim for setImmediate
            // if it is used as a global, so we have to work around that to
            // avoid bundling unnecessary code.
            // 无法使用 MutationObserver 的时候使用 setTimeout
            var context = inBrowser ? window : typeof global !== 'undefined' ? global : {};
            timerFunc = context.setImmediate || setTimeout;
        }
        return function (cb, ctx) {
            var func = ctx ? function () {
                cb.call(ctx);
            } : cb;
            callbacks.push(func);
            if (pending) return;
            pending = true;
            timerFunc(nextTickHandler, 0);
        };
    })();
    {% endhighlight %}

- 数据类型
    - _Set 如果没有原生的集合 Set，则提供一个实现
    - Cache 缓存队列 可以通过 limit 设置队列最大长度
        - put 在队列尾部加入元素，如果队列已满，先调用一次 shift
        - shift 在队列首部移除元素
        - get 根据键名，在队列任意位置提取一个元素，并插到队列末尾

- 命令解析
    - pushFilter 将一个 filter 字符串解析成过滤器名和参数，推入数组
    - processFilterArg 解析 filter 参数
{% highlight javascript %}
    function processFilterArg(arg) {
        if (reservedArgRE.test(arg)) {
            // 经检查为保留字 /^in$|^-?\d+/, in 或者正负数
            return {
                value: toNumber(arg),
                dynamic: false
            };
        } else {
            // 检查是否被引号包裹
            var stripped = stripQuotes(arg);
            var dynamic = stripped === arg;
            // 如果被引号包裹则认为是字符串，否则为变量
            return {
                value: dynamic ? arg : stripped,
                dynamic: dynamic
            };
        }
    }
{% endhighlight %}
- 命令解析
    - parseDirective 解析指令
{% highlight javascript %}
    // 解析形如 "a + 1 | uppercase" 这样的字符串
    // 返回一个对象 
    // {
    //     expression: 'a + 1',
    //     filters: [{name: 'uppercase', args: null}]
    // }
    function parseDirective(s) {
        // 检查是否解析过
        var hit = cache$1.get(s);
        if (hit) {
            // 如已经解析过，直接使用缓存队列中的结果
            return hit;
        }

        // reset parser state
        str = s;
        inSingle = inDouble = false;
        curly = square = paren = 0;
        lastFilterIndex = 0;
        dir = {};

        for (i = 0, l = str.length; i < l; i++) {
            // 前一个字符
            prev = c;
            // 当前字符
            c = str.charCodeAt(i);
            if (inSingle) {
                // check single quote
                // 0x27 '  0x5C \
                if (c === 0x27 && prev !== 0x5C) inSingle = !inSingle;
            } else if (inDouble) {
                // check double quote
                // 0x27 "  0x5C \
                if (c === 0x22 && prev !== 0x5C) inDouble = !inDouble;
            } else if (c === 0x7C && // pipe
                // 0x7C |
                    str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {
                if (dir.expression == null) {
                    // first filter, end of expression
                    lastFilterIndex = i + 1;
                    // 分离出表达式部分
                    dir.expression = str.slice(0, i).trim();
                } else {
                    // already has filter
                    // 解析处理 filter 部分
                    pushFilter();
                }
            } else {
                switch (c) {
                    case 0x22:
                        inDouble = true;break; // "
                    case 0x27:
                        inSingle = true;break; // '
                    case 0x28:
                        paren++;break; // (
                    case 0x29:
                        paren--;break; // )
                    case 0x5B:
                        square++;break; // [
                    case 0x5D:
                        square--;break; // ]
                    case 0x7B:
                        curly++;break; // {
                    case 0x7D:
                        curly--;break; // }
                }
            }
        }

        // 收尾
        if (dir.expression == null) {
            dir.expression = str.slice(0, i).trim();
        } else if (lastFilterIndex !== 0) {
            pushFilter();
        }

        cache$1.put(s, dir);
        return dir;
    }
{% endhighlight %}

- 命令解析
    - 正则字符串处理
        - escapeRegex 转义字符串中的特殊字符，生成一个能用于构造正则的字符串
        - compileRegex 生成识别边界界定符的正则 （默认是 {{ }} {{{ }}}）
    - parseText 字符串解析，将字符串中的 token 提取出来 (双括号或三括号包裹的内容)
        如输入 'a {{b}} c'
        输出 [
            {value: 'a '},
            {tag: true, value: 'b', html: false, oneTime: false},
            {value: ' c'}
        ]
        {% highlight javascript %}
            function parseText(text) {
                if (!cache) {
                    compileRegex();
                }
                var hit = cache.get(text);
                // 如有缓存使用缓存
                if (hit) {
                    return hit;
                }
                if (!tagRE.test(text)) {
                    // 如果没有识别到边界符，直接返回
                    return null;
                }
                var tokens = [];
                var lastIndex = tagRE.lastIndex = 0;
                var match, index, html, value, first, oneTime;
                /* eslint-disable no-cond-assign */
                while (match = tagRE.exec(text)) {
                    /* eslint-enable no-cond-assign */
                    index = match.index;
                    if (index > lastIndex) {
                        // 不在双括号或三括号中的内容
                        tokens.push({
                            value: text.slice(lastIndex, index)
                        });
                    }
                    // tag token
                    // 是否有三大括号内容
                    html = htmlRE.test(match[0]);
                    // 获取括号中间的内容
                    value = html ? match[1] : match[2];
                    first = value.charCodeAt(0);
                    oneTime = first === 42; // *
                    value = oneTime ? value.slice(1) : value;
                    tokens.push({
                        tag: true,
                        value: value.trim(),
                        html: html,
                        oneTime: oneTime
                    });
                    lastIndex = index + match[0].length;
                }
                if (lastIndex < text.length) {
                    tokens.push({
                        value: text.slice(lastIndex)
                    });
                }
                cache.put(text, tokens);
                return tokens;
            }
        {% endhighlight %}

- 命令解析
    - tokensToExp 将多个 token 组合到表达式字符串中
        如输入 'a {{b}} c' 输出 '"a " + b + " c"'
    - formatToken 处理单个 token
        如果不是 tag (即双括号/三括号包裹内容)，则直接返回，如果是，进行求值操作
    - inlineFilters 行内 filter 解析
    {% highlight javascript %}
    var filterRE = /[^|]\|[^|]/;
    function inlineFilters(exp, single) {
        if (!filterRE.test(exp)) {
            // 如果没有 filter，直接返回
            return single ? exp : '(' + exp + ')';
        } else {
            // 有 filter 的话对字符串进行解析
            var dir = parseDirective(exp);
            if (!dir.filters) {
                return '(' + exp + ')';
            } else {
                return 'this._applyFilters(' + dir.expression + // value
                        ',null,' + // oldValue (null for read)
                        JSON.stringify(dir.filters) + // filter descriptors
                        ',false)'; // write?
            }
        }
    }
    {% endhighlight %}

- config 全局配置
    定义了 config 变量，保存配置信息，包括各种开关（debug, warning ...），常量，分隔符等
    设置分隔符会让命令解析的缓存失效

- warning 根据 config 配置生成 warn 函数

- transition 带过渡动画操作
    - appendWithTransition 添加元素
    - beforeWithTransition 在元素之前插入
    - removeWithTransition 删除元素
    - applyTransition 过渡动画实现

- 节点操作相关
    - query 查询一个元素
    - inDoc 检查一个节点是否在文档中(nodetype 须为 1)
    - getAttr 获取一个节点的一个属性，并将属性从节点上移除
    - getBindAttr 获取一个 v-bind 属性
    - hasBindAttr 检查一个节点是否有绑定属性
    - before 在指定节点前插入节点
    - after 在指定节点后插入节点
    - remove 移除节点
    - prepend 在节点最前面插入子节点
    - replace 替换节点
    - on 在节点上绑定事件，实际上是调用 addEventListener
    - off 移除事件绑定
    - getClass 获取 css 类，包含对 IE9 的兼容
    - setClass 设置 css 类，包含对 IE9 的兼容
    - addClass 添加 css 类
    - removeClass 移除 css 类
    - extractContent 提取节点中的内容，生成 fragment 或 element
    - trimNode 去除首尾空格，注释
    - isTrimable 判断节点是否须要删除
    - isTemplate 检查节点是否为 template 标签
    - crateAnchor 创建锚点，主要用于节点的插入和删除
    - findRef 获取一个节点的 v-ref 属性，返回其驼峰形式
    - mapNodeRange 在一系列节点上 map 函数，参数为起始节点，结束节点和操作函数
        这一组节点须为同一个节点的子节点并且是连续的
    - removeNodeRange 删除一系列节点，可以捕获被删除的节点，删除完成后可触发回调
    - isFragment 检查是否为 fragment，即 nodeType 为 11
    - getOuterHTML 获取 outerHtml 属性
    - isUnknownElement 检查是否为未知的标签元素

- 组件识别
    - checkComponentAttr 检查一个元素是否为 vue 组件，如果是的话返回组件 id
    {% highlight javascript %}
    function checkComponentAttr(el, options) {
        // 获取标签名
        var tag = el.tagName.toLowerCase();
        // 检查标签是否有属性
        var hasAttrs = el.hasAttributes();
        if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {
            // 如果不是原生标签也不是 vue 标签（slot|partial|component...）
            if (resolveAsset(options, 'components', tag)) {
                return { id: tag };
            } else {
                // 获取 is 属性（is 用于在 tr/option 之类的标签上，表示其为组件）
                var is = hasAttrs && getIsBinding(el, options);
                if (is) {
                    return is;
                } else if ('development' !== 'production') {
                    // 发出错误信息
                    var expectedTag = options._componentNameMap && options._componentNameMap[tag];
                    if (expectedTag) {
                        warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');
                    } else if (isUnknownElement(el, tag)) {
                        warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.');
                    }
                }
            }
        } else if (hasAttrs) {
            return getIsBinding(el, options);
        }
    }
    {% endhighlight %}
- 组件识别
    - getIsBinding 获取 is 绑定，返回值为 {id: 组件id, dynamic: 是否为动态绑定}

- strats 配置重写策略
    - mergeData 辅助 merge 函数，合并策略为补充，不重写。递归合并
    - strats.data data 的合并策略



10. vue 实例的属性重写机制
    -. 各种 option， el，data 等的重写机制。
    -. Vue 对象参数 merge 方法

11. 变更监控
    -. Dep 对象，用于记录依赖，对象变更的时候更新所有依赖于变更对象的数据。
    -. 数组变异方法，如 push, pop, shift 之类的检测，增加 $set, $remove 方法
    -. 提供不触发监听检测的方法
    -. Observer 对象，用于监听变更。会在须要监听的目标上绑定一个 __ob__ 属性指向
    Observer。Observer 提供 walk 方法为对象每个属性设置 getter 和 setter，
    这样就可以在属性被访问/修改的时候触发事件，Observer 还提供 observeArray 实现对数组的监控。
    -. Observer 对象提供添加和移除 owner vm 的方法，用于触发相应的变化监控
    -. observe 方法, defineReactive 方法用于给对象属性增加监控器

12. util 对象

13. Vue 初始化方法 initMixin
    -. 将 options 写入实例属性，设定唯一 uid
    -. 绑定事件
    -. fragment 存储
    -. context, scope, frag 的设定，确定组件的层级关系

14. 表达式编译状态机，提供编译过程中各种状态

15. parse 函数，用于将字符串编译成片段数组，而且提供了缓存机制

16. expression 对象，如果不是简单的变量，赋予生成 getter 和 setter 的能力

17. Watcher 对象，负责触发 watcher 函数。

18. 模板解析，将字符或节点串转成 DocumentFragment
    -. Fragment 对象，拥有自己的 scop，有控制自己子节点的方法，联系 vue 实例的方法

19. 内置命令 v-for
    -. 参数列表
    -. bind 方法
    -. diff 方法，用于减少列表更新时的重绘。
    -. create 方法
    -. updateRef 方法
    -. updateModel 方法
    -. 针对 fragemnt 的创建、删除、移动、缓存等操作
未完待续
