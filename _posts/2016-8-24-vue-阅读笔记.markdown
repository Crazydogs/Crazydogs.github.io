---
layout: post
title:  "Vue 阅读笔记"
date:   2016-8-24 16:44:10
category: coding
---

看一下 vue 的源码，顺便做个笔记

- 作为模块加载
{% highlight javascript %}
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
        (global.Vue = factory());
    }(this, function () { 'use strict';
        ...
    }));
{% endhighlight %}

- set 方法
用于为对象添加属性
{% highlight javascript %}
    function set(obj, key, val) {
        // 如已有该属性，覆盖 [hasOwn](#)
        if (hasOwn(obj, key)) {
            obj[key] = val;
            return;
        }
        // 如对象为 vueModel，设置 _data 中的值
        if (obj._isVue) {
            set(obj._data, key, val);
            return;
        }
        var ob = obj.__ob__;
        // 如果不是 vueModel 则简单设置值
        if (!ob) {
            obj[key] = val;
            return;
        }
        // 如果是 vueModel 须要额外处理工作
        // 将属性设置为可响应的 [convert](#)
        ob.convert(key, val);
        // 通知依赖该数据的对象 [notify](#)
        ob.dep.notify();
        // 如果有上级的 vueModel，更新键值和 watcher
        if (ob.vms) {
            var i = ob.vms.length;
            while (i--) {
                var vm = ob.vms[i];
                vm._proxy(key);
                vm._digest();
            }
        }
        return val;
    }
{% endhighlight %}

- del 方法
为对象删除属性，如果有必要，触发 change 事件
{% highlight javascript %}
    function del(obj, key) {
        // 检查是否已有该属性 [hasOwn](#)
        if (!hasOwn(obj, key)) {
            return;
        }
        delete obj[key];
        var ob = obj.__ob__;
        if (!ob) {
            if (obj._isVue) {
                delete obj._data[key];
                // 更新所有 watcher [_digest](#)
                obj._digest();
            }
            return;
        }
        // 通知依赖此属性的对象 [notify](#)
        ob.dep.notify();
        // 如果有上级的 vueModel，更新键值和 watcher
        if (ob.vms) {
            var i = ob.vms.length;
            while (i--) {
                var vm = ob.vms[i];
                vm._unproxy(key);
                vm._digest();
            }
        }
    }
{% endhighlight %}

- 字符串检查
检查一个字符串是否能被转为字面量
{% highlight javascript %}
    // 开头空格+(布尔值|正负数|字符串)结尾空格
    var literalValueRE = /^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/;

    function isLiteral(exp) {
        return literalValueRE.test(exp);
    }
{% endhighlight %}
检查是否为保留字，即是否以 $ 或 _ 开头
{% highlight javascript %}
function isReserved(str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5F;
}
{% endhighlight %}

- 类型转换
    对特殊情况做了处理
    - _toString 转为字符串，确保空值输出为空字符串
    - toNumber 转为数字，无法转为数字时返回原值
    - toBoolean 转为布尔值，'false' 被认为是假值

- 字符串格式化
    - stripQuotes 去除字符串首尾引号
    - camelize 将用 - 拼接的字符串转为驼峰式字符串
    - hyphenate 将驼峰式的字符串转为用连字符连接
    - classify 将用 - 或 _ 或 / 连接的字符串转为驼峰式的类名

- 辅助函数
    - bind 代替原生的 bind 方法
    - toArray 将类数组对象转为真正的数组
    - extend 类似于 jQuery 的 extend 不过不提供深层递归功能
    - isObject 判断是否为对象（排除 null），主要用于判断是否能被 json 编码
    - isPlainObject 判断是否为简单的对象即 toString 返回 [object Object]
    - def 为对象设置带描述符的属性
    - _debounce 防抖函数，防止函数被过于频繁地触发
    - indexOf 在数组中查询对象的索引值
    - cancellable 将一个函数包装成一个可取消的版本，主要用于回调函数
        {% highlight javascript %}
        function cancellable(fn) {
            var cb = function cb() {
                if (!cb.cancelled) {
                    return fn.apply(this, arguments);
                }
            };
            // 可以通过调用 cancel 方法来静默原函数
            cb.cancel = function () {
                cb.cancelled = true;
            };
            return cb;
        }
        {% endhighlight %}
    - looseEqual 检查两个参数是否相等，如果均为对象且 json 编码后相同也视为相等

2. 公用函数
公用函数主要分以下几类
    -. 类型转换，_toString, toNumber, toArray 等
    -. 格式转换，如驼峰命名与 - 命名之间的转换
    -. 性能优化，提供比原生的更好的实现，如 bind, indexOf
    -. 补充常用功能，如 extend, def(设置描述符属性), looseEqual(对象内容相等判断)，
    set 数据结构实现
    -. 环境检查，检测 UA 等信息，再做一些相应的兼容处理
3. 解析判断，如，isLiteral，检查字符串是否代表字面量，还有对应 Vue 的过滤器，
指令等的解析，html 模板字符串的解析等。其中定义了名为 Cache 的缓存数据结构，
用来暂存解析结果。

4. 配置项，定义了 config 变量，保存配置信息，包括各种开关（debug, warning ...）,
常量，分隔符等

5. transition 相关操作

6. dom 元素相关操作
    -. query 查询，inDoc(检测是否在 document 中)
    -. 元素插入，移除，替换，提取内容，循环操作(mapNodeRange)等
    -. 属性相关操作，v-bind 属性检测
    -. class 相关操作，补充 addClass 之类的函数

7. 锚点创建，用于插入和删除节点时的定位，原理是创建注释节点或者空的文本节点

8. ref 相关操作，搜索 ref

9. html 标签识别，component 识别

10. vue 实例的属性重写机制
    -. 各种 option， el，data 等的重写机制。
    -. Vue 对象参数 merge 方法

11. 变更监控
    -. Dep 对象，用于记录依赖，对象变更的时候更新所有依赖于变更对象的数据。
    -. 数组变异方法，如 push, pop, shift 之类的检测，增加 $set, $remove 方法
    -. 提供不触发监听检测的方法
    -. Observer 对象，用于监听变更。会在须要监听的目标上绑定一个 __ob__ 属性指向
    Observer。Observer 提供 walk 方法为对象每个属性设置 getter 和 setter，
    这样就可以在属性被访问/修改的时候触发事件，Observer 还提供 observeArray 实现对数组的监控。
    -. Observer 对象提供添加和移除 owner vm 的方法，用于触发相应的变化监控
    -. observe 方法, defineReactive 方法用于给对象属性增加监控器

12. util 对象

13. Vue 初始化方法 initMixin
    -. 将 options 写入实例属性，设定唯一 uid
    -. 绑定事件
    -. fragment 存储
    -. context, scope, frag 的设定，确定组件的层级关系

14. 表达式编译状态机，提供编译过程中各种状态

15. parse 函数，用于将字符串编译成片段数组，而且提供了缓存机制

16. expression 对象，如果不是简单的变量，赋予生成 getter 和 setter 的能力

17. Watcher 对象，负责触发 watcher 函数。

18. 模板解析，将字符或节点串转成 DocumentFragment
    -. Fragment 对象，拥有自己的 scop，有控制自己子节点的方法，联系 vue 实例的方法

19. 内置命令 v-for
    -. 参数列表
    -. bind 方法
    -. diff 方法，用于减少列表更新时的重绘。
    -. create 方法
    -. updateRef 方法
    -. updateModel 方法
    -. 针对 fragemnt 的创建、删除、移动、缓存等操作
未完待续
